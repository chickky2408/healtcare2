import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export async function POST(req: Request) {
  const { email, password } = await req.json()

  // üîç ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô User ‡∏Å‡πà‡∏≠‡∏ô
  let user = await prisma.user.findUnique({ where: { email } })
  let role = 'USER'

  // üîç ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô User ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô Doctor
  if (!user) {
    const doctor = await prisma.doctor.findUnique({ where: { email } })
    if (doctor) {
      role = 'DOCTOR'
      user = doctor
    }
  }

  // üîç ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Doctor ‚Üí ‡∏•‡∏≠‡∏á Admin
  if (!user) {
    const admin = await prisma.admin.findUnique({ where: { email } })
    if (admin) {
      role = 'ADMIN'
      user = admin
    }
  }

  // ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö email ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏î‡πÜ
  if (!user) {
    return NextResponse.json({ message: 'Email not found' }, { status: 400 })
  }

  // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const match = await bcrypt.compare(password, user.password)
  if (!match) {
    return NextResponse.json({ message: 'Incorrect password' }, { status: 401 })
  }

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
  return NextResponse.json({
    message: 'Login successful',
    user: {
      id: user.id,
      name: user.name,
      email: user.email,
      role, // ‡∏™‡πà‡∏á role ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    }
  })
}