generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  name      String
  // role      Role     @default(USER)
  createdAt DateTime    @default(now())
  diagnoses Diagnosis[]
}

// enum Role {
//   USER
//   DOCTOR
//   ADMIN
// }

model Doctor {
  id           String         @id @default(cuid())
  email        String         @unique
  password     String
  name         String
  specialty    String
  createdAt    DateTime       @default(now())
  availability Availability[] // เวลาว่างของหมอแต่ละคน
  appointments Appointment[] // การจองของหมอ
  meetLink     String?
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
}

model Availability {
  id        String     @id @default(cuid())
  doctorId  String
  doctor    Doctor     @relation(fields: [doctorId], references: [id])
  date      DateTime
  timeSlots TimeSlot[] // ใช้ model แทน array
}

model TimeSlot {
  id             String       @id @default(cuid())
  time           String
  availabilityId String
  availability   Availability @relation(fields: [availabilityId], references: [id])
}

//appointment

model Appointment {
  id           String        @id @default(cuid())
  doctorId     String
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  patientName  String
  patientEmail String
  date         DateTime
  time         String
  type         TreatmentType
  symptoms     String
  createdAt    DateTime      @default(now())
  diagnoses    Diagnosis[]
}

enum TreatmentType {
  VIDEO_CALL
  CLEANING
  ORTHODONTIC
  AI_DIAGNOSIS
  SURGERY
}

// AIDiagnosis

model Diagnosis {
  id            String       @id @default(uuid())
  imagePath     String
  result        String
  confidence    Float
  createdAt     DateTime     @default(now())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  appointmentId String? // optional
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
}
